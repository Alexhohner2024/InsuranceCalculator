import os
import re
import json
import asyncio
import aiohttp
from http.server import BaseHTTPRequestHandler
from urllib.parse import parse_qs

class WebhookHandler(BaseHTTPRequestHandler):
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN', '')
        
        # –¢–∞—Ä–∏—Ñ—ã
        self.tariffs = {
            'B1': {'name': '–¥–æ 1600 —Å–º¬≥', 'price': 1959},
            'B2': {'name': '1601-2000 —Å–º¬≥', 'price': 2527},
            'B3': {'name': '2001-3000 —Å–º¬≥', 'price': 2585},
            'B4': {'name': '—Å–≤—ã—à–µ 3000 —Å–º¬≥', 'price': 3349}
        }
        
        self.car_brands = [
            'BMW', 'MERCEDES', 'AUDI', 'VOLKSWAGEN', 'TOYOTA', 'HONDA', 'NISSAN',
            'HYUNDAI', 'KIA', 'FORD', 'CHEVROLET', 'OPEL', 'PEUGEOT', 'RENAULT',
            'LEXUS', 'DAEWOO', 'MAZDA', 'SUBARU', 'MITSUBISHI', 'LADA'
        ]
    
    def get_category(self, engine_volume):
        try:
            volume = int(engine_volume)
            if volume <= 1600:
                return 'B1'
            elif volume <= 2000:
                return 'B2'
            elif volume <= 3000:
                return 'B3'
            else:
                return 'B4'
        except:
            return 'B2'
    
    def parse_text(self, text):
        text = text.upper().strip()
        result = {'brand': None, 'model': None, 'engine_volume': None}
        
        # –ü–æ–∏—Å–∫ –æ–±—ä–µ–º–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è
        volume_patterns = [
            r'(\d{3,4})\s*(?:–°–ú|CM|–ö–£–ë–û–í|–ö–£–ë)',
            r'(\d{1,2})[.,](\d{3})',
            r'(\d{3,4})(?=\s|$)'
        ]
        
        for pattern in volume_patterns:
            match = re.search(pattern, text)
            if match:
                if len(match.groups()) == 2:
                    volume = match.group(1) + match.group(2)
                else:
                    volume = match.group(1)
                
                if 500 <= int(volume) <= 8000:
                    result['engine_volume'] = volume
                    break
        
        # –ü–æ–∏—Å–∫ –º–∞—Ä–∫–∏
        for brand in self.car_brands:
            if brand in text:
                result['brand'] = brand
                break
        
        return result
    
    def format_result(self, data):
        engine_volume = data.get('engine_volume')
        if not engine_volume:
            return "‚ùì –ù–µ —É–∫–∞–∑–∞–Ω –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è. –ù–∞–ø–∏—à–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä: 'BMW X3 1998 —Å–º¬≥'"
        
        category = self.get_category(engine_volume)
        price = self.tariffs[category]['price']
        
        brand = data.get('brand', '–ê–≤—Ç–æ–º–æ–±–∏–ª—å')
        model = data.get('model', '')
        volume_liters = f"{float(engine_volume)/1000:.3f} –ª"
        
        vehicle_name = f"{brand} {model}".strip()
        if volume_liters:
            vehicle_name += f", {volume_liters} –±–µ–Ω–∑–∏–Ω"
        
        return f"""‚úÖ –¶—ñ–Ω–∞ –∞–≤—Ç–æ—Ü–∏–≤—ñ–ª–∫–∏ (–û–°–¶–ü–í) –¥–ª—è {vehicle_name}:
ü©∫ –ü–æ–∫—Ä–∏—Ç—Ç—è: –∂–∏—Ç—Ç—è —ñ –∑–¥–æ—Ä–æ–≤'—è –ø–æ—Ç–µ—Ä–ø—ñ–ª–∏—Ö –¥–æ 5 000 000 –≥—Ä–Ω
üöó –ü–æ–∫—Ä–∏—Ç—Ç—è: –º–∞–π–Ω–æ –ø–æ—Ç–µ—Ä–ø—ñ–ª–∏—Ö –¥–æ 1 250 000 –≥—Ä–Ω
üë§ –î—ñ—î –¥–ª—è –≤–æ–¥—ñ—ó–≤ –≤—ñ–∫–æ–º: –±—ñ–ª—å—à–µ 30 —Ä–æ–∫—ñ–≤
üí∞ –¶—ñ–Ω–∞: {price} –≥—Ä–Ω"""
    
    async def send_message(self, chat_id, text):
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': text
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=data) as response:
                return await response.json()
    
    async def process_update(self, update_data):
        try:
            message = update_data.get('message', {})
            if not message:
                return
            
            chat_id = message['chat']['id']
            text = message.get('text', '')
            
            if text == '/start':
                response = """üöó –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –û–°–¶–ü–í.

üí¨ –ù–∞–ø–∏—à–∏ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:
‚Ä¢ "BMW X3 1998 —Å–º¬≥"
‚Ä¢ "Toyota Camry 1800"

–ß—Ç–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º?"""
            
            elif text == '/help':
                response = """‚ÑπÔ∏è –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:

üí≠ –ü–∏—à–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ:
‚Ä¢ "BMW X3 –æ–±—ä–µ–º 2000"
‚Ä¢ "—Ö–æ—á—É –¥–ª—è –¢–æ–π–æ—Ç—ã, 1800 –∫—É–±–æ–≤"

–ë–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç –æ–±—ã—á–Ω—É—é —Ä–µ—á—å! üòä"""
            
            else:
                parsed = self.parse_text(text)
                
                if parsed['engine_volume']:
                    response = self.format_result(parsed)
                elif any(word in text.lower() for word in ['—Å–ø–∞—Å–∏–±–æ', '–¥—è–∫—É—é']):
                    response = "üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤."
                else:
                    if parsed['brand']:
                        response = f"üîç –ü–æ–Ω—è–ª: {parsed['brand']}\n\n‚ùì –ö–∞–∫–æ–π –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ —Å–º¬≥?"
                    else:
                        response = "ü§î –ù–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä: 'BMW X3 1998 —Å–º¬≥'"
            
            await self.send_message(chat_id, response)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
webhook_handler = WebhookHandler()

def handler(request, response):
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Vercel API"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = request.get('body', '{}')
        if isinstance(body, str):
            update_data = json.loads(body)
        else:
            update_data = body
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(webhook_handler.process_update(update_data))
        loop.close()
        
        return response.status(200).json({"status": "ok"})
        
    except Exception as e:
        print(f"Handler error: {e}")
        return response.status(500).json({"error": str(e)})
