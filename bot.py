import os
import asyncio
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from excel_handler import TariffHandler
from ocr_processor import ClaudeProcessor

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–±—É–¥–µ—Ç –∑–∞–¥–∞–Ω —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
tariff_handler = TariffHandler()
claude_processor = ClaudeProcessor()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_contexts = {}

class UserContext:
    def __init__(self):
        self.vehicle_data = {}
        self.waiting_for = None  # 'engine_volume', 'brand', 'model'
        self.conversation_state = 'idle'  # 'idle', 'collecting_data', 'confirming'
        self.media_group_photos = []
        
    def reset(self):
        self.vehicle_data = {}
        self.waiting_for = None
        self.conversation_state = 'idle'
        self.media_group_photos = []

def get_user_context(user_id: int) -> UserContext:
    if user_id not in user_contexts:
        user_contexts[user_id] = UserContext()
    return user_contexts[user_id]

@dp.message(Command('start'))
async def start_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    welcome_text = """
üöó –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –û–°–¶–ü–í (–∞–≤—Ç–æ–≥—Ä–∞–∂–¥–∞–Ω–∫–∏).

üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ:
‚Ä¢ "BMW X3 2000 —Å–º¬≥" 
‚Ä¢ "Toyota Camry 1800"
‚Ä¢ –ò–ª–∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞

üîç –Ø —É–º–µ—é –ø–æ–Ω–∏–º–∞—Ç—å –æ–±—ã—á–Ω—É—é —Ä–µ—á—å - –ø–∏—à–∏ –∫–∞–∫ —É–¥–æ–±–Ω–æ!

–ß—Ç–æ –±—É–¥–µ–º —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å?
"""
    context = get_user_context(message.from_user.id)
    context.reset()
    await message.answer(welcome_text)

@dp.message(Command('help'))
async def help_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

üí≠ –ü–∏—à–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ:
‚Ä¢ "—Ö–æ—á—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–ª—è –ë–ú–í –•3"
‚Ä¢ "–æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è 1998"
‚Ä¢ "—ç—Ç–æ –¥–∏–∑–µ–ª—å 2.0 –ª–∏—Ç—Ä–∞"

üì∏ –ò–ª–∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞ - —è —Å–∞–º –≤—Å–µ –Ω–∞–π–¥—É

üè∑Ô∏è –ü–æ–∫—Ä—ã—Ç–∏–µ –û–°–¶–ü–í:
‚Ä¢ –ñ–∏–∑–Ω—å –∏ –∑–¥–æ—Ä–æ–≤—å–µ: –¥–æ 5 000 000 –≥—Ä–Ω
‚Ä¢ –ò–º—É—â–µ—Å—Ç–≤–æ: –¥–æ 1 250 000 –≥—Ä–Ω

–ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏ –ø–∏—Å–∞—Ç—å - —è –ø–æ–π–º—É! üòä
"""
    await message.answer(help_text)

@dp.message(lambda message: message.media_group_id)
async def process_media_group(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    context = get_user_context(message.from_user.id)
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
    if not hasattr(context, 'media_group_buffer'):
        context.media_group_buffer = []
    
    context.media_group_buffer.append(message.photo[-1])
    
    # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ
    await asyncio.sleep(2)
    
    if len(context.media_group_buffer) > 0:
        await process_multiple_photos(message, context.media_group_buffer)
        context.media_group_buffer = []

@dp.message(lambda message: message.content_type == 'photo')
async def process_single_photo(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    context = get_user_context(message.from_user.id)
    processing_msg = await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        file_data = await bot.download_file(file_info.file_path)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Claude
        result = await claude_processor.analyze_document(file_data.read())
        
        if "error" in result:
            await processing_msg.edit_text(f"üòî {result['error']}\n\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        context.vehicle_data.update(result)
        context.conversation_state = 'collecting_data'
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –Ω–∞—à–ª–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –µ—â–µ
        response = format_recognized_data(result)
        missing = get_missing_critical_data(result)
        
        if missing:
            response += f"\n\n‚ùì {missing}"
            context.waiting_for = get_next_required_field(result)
        else:
            # –í—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º
            response += "\n\n" + calculate_and_format_result(context.vehicle_data)
            context.reset()
        
        await processing_msg.edit_text(response)
        
    except Exception as e:
        await processing_msg.edit_text(f"üòî –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–º.")

async def process_multiple_photos(message: types.Message, photos: list):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ"""
    context = get_user_context(message.from_user.id)
    processing_msg = await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ
        images = []
        for photo in photos:
            file_info = await bot.get_file(photo.file_id)
            file_data = await bot.download_file(file_info.file_path)
            images.append(file_data.read())
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Claude
        result = await claude_processor.analyze_multiple_images(images)
        
        if "error" in result:
            await processing_msg.edit_text(f"üòî {result['error']}\n\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–º.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        context.vehicle_data.update(result)
        context.conversation_state = 'collecting_data'
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        response = format_recognized_data(result)
        missing = get_missing_critical_data(result)
        
        if missing:
            response += f"\n\n‚ùì {missing}"
            context.waiting_for = get_next_required_field(result)
        else:
            response += "\n\n" + calculate_and_format_result(context.vehicle_data)
            context.reset()
        
        await processing_msg.edit_text(response)
        
    except Exception as e:
        await processing_msg.edit_text(f"üòî –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

@dp.message()
async def process_text_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    context = get_user_context(user_id)
    text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–µ–∂–ª–∏–≤—ã–µ —Ñ—Ä–∞–∑—ã –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
    if is_polite_response(text):
        await handle_polite_response(message, context, text)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    if is_new_calculation_request(text):
        context.reset()
        await message.answer("üöó –û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –±—É–¥–µ–º —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å?")
        return
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if context.conversation_state == 'idle':
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
        await start_new_calculation(message, context, text)
    else:
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        await continue_data_collection(message, context, text)

async def start_new_calculation(message: types.Message, context: UserContext, text: str):
    """–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç"""
    # –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç
    parsed_data = claude_processor.parse_text_input(text)
    context.vehicle_data.update({k: v for k, v in parsed_data.items() if v})
    context.conversation_state = 'collecting_data'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏
    if parsed_data.get('engine_volume'):
        # –ï—Å—Ç—å –æ–±—ä–µ–º - –º–æ–∂–µ–º —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å
        result = calculate_and_format_result(context.vehicle_data)
        await message.answer(result)
        context.reset()
    else:
        # –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        response = format_recognized_data(context.vehicle_data)
        missing = get_missing_critical_data(context.vehicle_data)
        response += f"\n\n‚ùì {missing}"
        context.waiting_for = 'engine_volume'
        await message.answer(response)

async def continue_data_collection(message: types.Message, context: UserContext, text: str):
    """–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    context.vehicle_data = claude_processor.extract_missing_data(context.vehicle_data, text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å
    if context.vehicle_data.get('engine_volume'):
        # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        result = calculate_and_format_result(context.vehicle_data)
        await message.answer(result)
        context.reset()
    else:
        # –í—Å–µ –µ—â–µ –Ω—É–∂–µ–Ω –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è
        response = "ü§î –ü–æ–Ω—è–ª"
        if context.vehicle_data.get('brand') or context.vehicle_data.get('model'):
            response += f", {format_current_data(context.vehicle_data)}"
        response += ".\n\n‚ùì –ö–∞–∫–æ–π –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ —Å–º¬≥?"
        await message.answer(response)

def is_polite_response(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –≤–µ–∂–ª–∏–≤—ã–µ –æ—Ç–≤–µ—Ç—ã"""
    polite_words = ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '–¥—è–∫—É—é', '–æ–∫', '—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–ø–æ–Ω—è—Ç–Ω–æ', '—è—Å–Ω–æ', '–¥–∞', '–Ω–µ—Ç']
    return any(word in text.lower() for word in polite_words)

async def handle_polite_response(message: types.Message, context: UserContext, text: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–∂–ª–∏–≤—ã–µ –æ—Ç–≤–µ—Ç—ã"""
    text_lower = text.lower()
    
    if any(word in text_lower for word in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '–¥—è–∫—É—é']):
        await message.answer("üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –û–±—Ä–∞—â–∞–π—Å—è, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –µ—â–µ —Ä–∞—Å—á–µ—Ç.")
        context.reset()
    elif any(word in text_lower for word in ['–æ–∫', '—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–ø–æ–Ω—è—Ç–Ω–æ', '—è—Å–Ω–æ']):
        if context.waiting_for:
            await message.answer("üëç –ñ–¥—É –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
        else:
            await message.answer("üòä –ß—Ç–æ –±—É–¥–µ–º —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å?")
    elif '–¥–∞' in text_lower:
        await message.answer("üëç –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º!")
    elif '–Ω–µ—Ç' in text_lower:
        await message.answer("ü§î –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ —Ç–∞–∫? –î–∞–≤–∞–π –∏—Å–ø—Ä–∞–≤–∏–º!")

def is_new_calculation_request(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞"""
    new_calc_words = ['–Ω–æ–≤—ã–π', '–µ—â–µ', '–¥—Ä—É–≥–æ–π', '—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å', '—Ä–∞—Å—á–µ—Ç', '–¥—Ä—É–≥–∞—è –º–∞—à–∏–Ω–∞', '–¥—Ä—É–≥–æ–µ –∞–≤—Ç–æ']
    return any(word in text.lower() for word in new_calc_words)

def format_recognized_data(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    parts = []
    if data.get('brand'):
        parts.append(data['brand'])
    if data.get('model'):
        parts.append(data['model'])
    if data.get('year'):
        parts.append(f"{data['year']} –≥–æ–¥–∞")
    
    if parts:
        result = f"üîç –ü–æ–Ω—è–ª: {' '.join(parts)}"
        if data.get('engine_volume'):
            result += f", {data['engine_volume']} —Å–º¬≥"
        return result
    elif data.get('engine_volume'):
        return f"üîç –û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {data['engine_volume']} —Å–º¬≥"
    else:
        return "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ..."

def format_current_data(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ"""
    parts = []
    if data.get('brand'):
        parts.append(data['brand'])
    if data.get('model'):
        parts.append(data['model'])
    return ' '.join(parts) if parts else "–∞–≤—Ç–æ–º–æ–±–∏–ª—å"

def get_missing_critical_data(data: dict) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"""
    if not data.get('engine_volume'):
        return "–ö–∞–∫–æ–π –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ —Å–º¬≥?"
    return ""

def get_next_required_field(data: dict) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Ç—Ä–µ–±—É–µ–º–æ–µ –ø–æ–ª–µ"""
    if not data.get('engine_volume'):
        return 'engine_volume'
    return None

def calculate_and_format_result(vehicle_data: dict) -> str:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        engine_volume = vehicle_data.get('engine_volume')
        if not engine_volume:
            return "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞. –£–∫–∞–∂–∏ –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è."
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = tariff_handler.get_car_category(engine_volume)
        price = tariff_handler.get_price(category, age_over_30=True)
        
        if not price:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è."
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        brand = vehicle_data.get('brand', '–ê–≤—Ç–æ–º–æ–±–∏–ª—å')
        model = vehicle_data.get('model', '')
        year = vehicle_data.get('year', '')
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–º –≤ –ª–∏—Ç—Ä—ã
        volume_liters = f"{float(engine_volume)/1000:.3f} –ª"
        
        vehicle_name = f"{brand} {model} {year}".strip()
        vehicle_name += f", {volume_liters} –±–µ–Ω–∑–∏–Ω"
        
        result = f"""‚úÖ –¶—ñ–Ω–∞ –∞–≤—Ç–æ—Ü–∏–≤—ñ–ª–∫–∏ (–û–°–¶–ü–í) –¥–ª—è {vehicle_name}:
ü©∫ –ü–æ–∫—Ä–∏—Ç—Ç—è: –∂–∏—Ç—Ç—è —ñ –∑–¥–æ—Ä–æ–≤'—è –ø–æ—Ç–µ—Ä–ø—ñ–ª–∏—Ö –¥–æ 5 000 000 –≥—Ä–Ω
üöó –ü–æ–∫—Ä–∏—Ç—Ç—è: –º–∞–π–Ω–æ –ø–æ—Ç–µ—Ä–ø—ñ–ª–∏—Ö –¥–æ 1 250 000 –≥—Ä–Ω
üë§ –î—ñ—î –¥–ª—è –≤–æ–¥—ñ—ó–≤ –≤—ñ–∫–æ–º: –±—ñ–ª—å—à–µ 30 —Ä–æ–∫—ñ–≤
üí∞ –¶—ñ–Ω–∞: {price} –≥—Ä–Ω"""
        
        return result
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}"

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Vercel
def handler(request, context=None):
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Vercel"""
    import asyncio
    import json
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        if hasattr(request, 'get_json'):
            # Flask-style request
            body = request.get_json()
        elif hasattr(request, 'json'):
            # FastAPI-style request
            body = request.json
        else:
            # Raw request
            if hasattr(request, 'body'):
                body_str = request.body
            else:
                body_str = request
            
            if isinstance(body_str, str):
                body = json.loads(body_str)
            else:
                body = body_str
        
        # –°–æ–∑–¥–∞–µ–º Update –æ–±—ä–µ–∫—Ç
        update = types.Update(**body)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(dp.feed_update(bot, update))
        loop.close()
        
        return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps({"status": "ok"})
        }
        
    except Exception as e:
        return {
            "statusCode": 500,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps({"error": str(e)})
        }

# –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
app = handler

# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    import logging
    logging.basicConfig(level=logging.INFO)
    
    async def main():
        await dp.start_polling(bot)
    
    asyncio.run(main())
