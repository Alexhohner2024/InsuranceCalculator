import os
import re
import json
import asyncio
from typing import Dict, Any

# –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ aiogram - –æ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å Vercel
class SimpleBot:
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN', '')
        self.user_contexts = {}
        
        # –¢–∞—Ä–∏—Ñ—ã –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ–¥–µ (–ø—Ä–æ—â–µ —á–µ–º Excel –Ω–∞ Vercel)
        self.tariffs = {
            'B1': {'name': '–¥–æ 1600 —Å–º¬≥', 'price': 1959},
            'B2': {'name': '1601-2000 —Å–º¬≥', 'price': 2527},
            'B3': {'name': '2001-3000 —Å–º¬≥', 'price': 2585},
            'B4': {'name': '—Å–≤—ã—à–µ 3000 —Å–º¬≥', 'price': 3349}
        }
        
        self.car_brands = [
            'BMW', 'MERCEDES', 'AUDI', 'VOLKSWAGEN', 'TOYOTA', 'HONDA', 'NISSAN',
            'HYUNDAI', 'KIA', 'FORD', 'CHEVROLET', 'OPEL', 'PEUGEOT', 'RENAULT',
            'LEXUS', 'DAEWOO', 'MAZDA', 'SUBARU', 'MITSUBISHI', 'LADA'
        ]
    
    def get_category(self, engine_volume):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –æ–±—ä–µ–º—É –¥–≤–∏–≥–∞—Ç–µ–ª—è"""
        try:
            volume = int(engine_volume)
            if volume <= 1600:
                return 'B1'
            elif volume <= 2000:
                return 'B2'
            elif volume <= 3000:
                return 'B3'
            else:
                return 'B4'
        except:
            return 'B2'
    
    def parse_text(self, text):
        """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        text = text.upper().strip()
        result = {'brand': None, 'model': None, 'engine_volume': None}
        
        # –ü–æ–∏—Å–∫ –æ–±—ä–µ–º–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è
        volume_patterns = [
            r'(\d{3,4})\s*(?:–°–ú|CM|–ö–£–ë–û–í|–ö–£–ë)',
            r'(\d{1,2})[.,](\d{3})',
            r'(\d{3,4})(?=\s|$)'
        ]
        
        for pattern in volume_patterns:
            match = re.search(pattern, text)
            if match:
                if len(match.groups()) == 2:
                    volume = match.group(1) + match.group(2)
                else:
                    volume = match.group(1)
                
                if 500 <= int(volume) <= 8000:
                    result['engine_volume'] = volume
                    break
        
        # –ü–æ–∏—Å–∫ –º–∞—Ä–∫–∏
        for brand in self.car_brands:
            if brand in text:
                result['brand'] = brand
                # –ò—â–µ–º –º–æ–¥–µ–ª—å –ø–æ—Å–ª–µ –º–∞—Ä–∫–∏
                brand_index = text.find(brand)
                text_after = text[brand_index + len(brand):].strip()
                model_match = re.search(r'^[–ê-–ØA-Z0-9\-]+', text_after)
                if model_match:
                    model = model_match.group()
                    if not re.match(r'^\d{3,4}$', model):
                        result['model'] = model
                break
        
        return result
    
    def format_result(self, data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞"""
        engine_volume = data.get('engine_volume')
        if not engine_volume:
            return "‚ùì –ù–µ —É–∫–∞–∑–∞–Ω –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è. –ù–∞–ø–∏—à–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä: 'BMW X3 1998 —Å–º¬≥'"
        
        category = self.get_category(engine_volume)
        price = self.tariffs[category]['price']
        
        brand = data.get('brand', '–ê–≤—Ç–æ–º–æ–±–∏–ª—å')
        model = data.get('model', '')
        volume_liters = f"{float(engine_volume)/1000:.3f} –ª"
        
        vehicle_name = f"{brand} {model}".strip()
        if volume_liters:
            vehicle_name += f", {volume_liters} –±–µ–Ω–∑–∏–Ω"
        
        return f"""‚úÖ –¶—ñ–Ω–∞ –∞–≤—Ç–æ—Ü–∏–≤—ñ–ª–∫–∏ (–û–°–¶–ü–í) –¥–ª—è {vehicle_name}:
ü©∫ –ü–æ–∫—Ä–∏—Ç—Ç—è: –∂–∏—Ç—Ç—è —ñ –∑–¥–æ—Ä–æ–≤'—è –ø–æ—Ç–µ—Ä–ø—ñ–ª–∏—Ö –¥–æ 5 000 000 –≥—Ä–Ω
üöó –ü–æ–∫—Ä–∏—Ç—Ç—è: –º–∞–π–Ω–æ –ø–æ—Ç–µ—Ä–ø—ñ–ª–∏—Ö –¥–æ 1 250 000 –≥—Ä–Ω
üë§ –î—ñ—î –¥–ª—è –≤–æ–¥—ñ—ó–≤ –≤—ñ–∫–æ–º: –±—ñ–ª—å—à–µ 30 —Ä–æ–∫—ñ–≤
üí∞ –¶—ñ–Ω–∞: {price} –≥—Ä–Ω"""
    
    async def send_message(self, chat_id, text):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API"""
        import aiohttp
        
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=data) as response:
                return await response.json()
    
    async def process_update(self, update_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram"""
        try:
            message = update_data.get('message', {})
            if not message:
                return
            
            chat_id = message['chat']['id']
            text = message.get('text', '')
            
            # –ö–æ–º–∞–Ω–¥—ã
            if text == '/start':
                response = """üöó –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –û–°–¶–ü–í.

üí¨ –ù–∞–ø–∏—à–∏ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:
‚Ä¢ "BMW X3 1998 —Å–º¬≥"
‚Ä¢ "Toyota Camry 1800"

–ß—Ç–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º?"""
            
            elif text == '/help':
                response = """‚ÑπÔ∏è –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:

üí≠ –ü–∏—à–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ:
‚Ä¢ "BMW X3 –æ–±—ä–µ–º 2000"
‚Ä¢ "—Ö–æ—á—É –¥–ª—è –¢–æ–π–æ—Ç—ã, 1800 –∫—É–±–æ–≤"

üè∑Ô∏è –ü–æ–∫—Ä—ã—Ç–∏–µ –û–°–¶–ü–í:
‚Ä¢ –ñ–∏–∑–Ω—å: –¥–æ 5 000 000 –≥—Ä–Ω
‚Ä¢ –ò–º—É—â–µ—Å—Ç–≤–æ: –¥–æ 1 250 000 –≥—Ä–Ω

–ë–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç –æ–±—ã—á–Ω—É—é —Ä–µ—á—å! üòä"""
            
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
                parsed = self.parse_text(text)
                
                if parsed['engine_volume']:
                    # –ï—Å—Ç—å –æ–±—ä–µ–º - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º
                    response = self.format_result(parsed)
                elif any(word in text.lower() for word in ['—Å–ø–∞—Å–∏–±–æ', '–¥—è–∫—É—é', '–±–ª–∞–≥–æ–¥–∞—Ä—é']):
                    response = "üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤."
                elif any(word in text.lower() for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä—ã–π']):
                    response = "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –±—É–¥–µ–º —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å?"
                else:
                    if parsed['brand']:
                        response = f"üîç –ü–æ–Ω—è–ª: {parsed['brand']} {parsed.get('model', '')}\n\n‚ùì –ö–∞–∫–æ–π –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ —Å–º¬≥?"
                    else:
                        response = "ü§î –ù–µ –ø–æ–Ω—è–ª –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n\nüí° –ù–∞–ø–∏—à–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä: 'BMW X3 1998 —Å–º¬≥'"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await self.send_message(chat_id, response)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
simple_bot = SimpleBot()

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Vercel
def handler(request):
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook"""
    import asyncio
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        if hasattr(request, 'get_json'):
            body = request.get_json()
        else:
            # –î–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
            body_content = getattr(request, 'body', getattr(request, 'data', '{}'))
            if isinstance(body_content, bytes):
                body_content = body_content.decode('utf-8')
            if isinstance(body_content, str):
                body = json.loads(body_content)
            else:
                body = body_content
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(simple_bot.process_update(body))
        loop.close()
        
        return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps({"status": "ok"})
        }
        
    except Exception as e:
        print(f"Handler error: {e}")
        return {
            "statusCode": 500,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps({"error": str(e)})
        }

# –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
app = handler
